// vendoring libraries
    @use "sass:math";
    @use "sass:map";
// declaration
    $grid-column-base: 12;
    $grid-gutter-default: 30px;
    $grid-breakpoints: (
        xs: 0,
        sm: 576px,
        md: 768px,
        lg: 992px,
        xl: 1200px,
        xxl: 1400px
    );
    $container-max-widths: (
        xs: null,
        sm: 540px,
        md: 720px,
        lg: 960px,
        xl: 1140px,
        xxl: 1320px
    );
    $gutter-list: (
        xs: 10px,
        sm: 10px,
        md: 15px,
        lg: 15px,
        xl: 30px,
        xxl: 30px
    );
    $gutters: (
        0: 0,
        1: 0.25,
        2: 0.5,
        3: 1,
        4: 1.5,
        5: 3,
    );

// mixin 
    @mixin responsive-option($bp, $dm) {
        @if ($bp=="xs") {
            @content;
        }
        @else {
            @media all and (min-width: $dm) {
                @content;
            }
        }
    }

    %gutter-option {
        padding-left: calc(var(--gutter-x) * 0.5); padding-right: calc(var(--gutter-x) * 0.5);
    }
    %prevent-padding {
        margin-left: calc(var(--gutter-x) * -0.5); 
        margin-right: calc(var(--gutter-x) * -0.5);
        margin-top: calc(var(--gutter-y) * -1);
    }
// real code here
    %container {
        width: 100%;
        --gutter-x: #{$grid-gutter-default * 1};
        --gutter-y: #{$grid-gutter-default * 0};
        margin-left: auto; margin-right: auto;
    } 
    .container {
        @extend %container;
        @extend %gutter-option;
        &-fluid {
            @extend %container;
        }
    }

    .row {
        display: flex; flex-wrap: wrap;
        @extend %prevent-padding;
        //.row > .col (by default)
        > * {
            flex: 1 0;
            @extend %gutter-option;
            margin-top: var(--gutter-y);
        }
        //.row-cols-{??}-1 > .col
        @each $bp, $dm in $grid-breakpoints {
            @include responsive-option($bp, $dm) {
                $include-bp: if($bp!=xs,"-"+$bp,"");
                @for $i from 1 through 6 {
                    &-cols#{$include-bp}-#{$i} > * {
                        flex: 0 0 auto;
                        width: calc(100% / #{$i});
                    }
                }
            }
        }
    }

    @each $bp, $dm in $grid-breakpoints {
        @include responsive-option($bp, $dm) {
            //identify breakpoints
            $include-bp: if($bp!=xs,"-"+$bp,"");
            // container
            .container {
                max-width: map.get($container-max-widths, $bp);
            }
            // .col-x
            @for $i from 1 through 12 {
                .col#{$include-bp}-#{$i} {
                    flex: 0 0 auto;
                    width: calc(100% / #{$grid-column-base} * #{$i});
                }
            }

            @for $i from 0 through 11 {
                .offset#{$include-bp}-#{$i} {
                    margin-left: calc(100% / #{$grid-column-base} * #{$i});
                }
            }

            @each $i, $value in $gutters {
                .gx#{$include-bp}-#{$i}, .g#{$include-bp}-#{$i} {
                    --gutter-x: calc(#{$grid-gutter-default * map.get($gutters, $i)});
                }
                .gy#{$include-bp}-#{$i}, .g#{$include-bp}-#{$i} {
                    --gutter-y: calc(#{$grid-gutter-default * map.get($gutters, $i)});
                }       
            }

        }
    }